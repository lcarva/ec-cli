---
# Copyright The Enterprise Contract Contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

# This Pipeline is a variation of:
# https://github.com/konflux-ci/release-service-catalog/blob/development/pipelines/push-to-external-registry/push-to-external-registry.yaml
# It has been modified from its original version. It has been formatted to fit Tenant Release Pipelines.
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: push-to-registry
spec:
  description: >-
    Tekton pipeline to release Snapshots to a registry.
  params:
    - name: release
      type: string
      description:
        The namespaced name (namespace/name) of the Release custom resource initiating this pipeline execution
    - name: releasePlan
      type: string
      description: The namespaced name (namespace/name) of the releasePlan
    - name: snapshot
      type: string
      description: The namespaced name (namespace/name) of the snapshot
    - name: enterpriseContractPolicy
      type: string
      description: JSON representation of the EnterpriseContractPolicy
      default: UPDATE_ME
    - name: enterpriseContractExtraRuleData
      type: string
      description: |
        Extra rule data to be merged into the policy specified in params.enterpriseContractPolicy. Use syntax
        "key1=value1,key2=value2..."
      default: "pipeline_intention=release"
    - name: enterpriseContractTimeout
      type: string
      description: Timeout setting for `ec validate`
      default: 40m0s
  workspaces:
    - name: release-workspace
  tasks:
    - name: verify-access-to-resources
      params:
        - name: release
          value: $(params.release)
        - name: releasePlan
          value: $(params.releasePlan)
        - name: snapshot
          value: $(params.snapshot)
        - name: requireInternalServices
          value: "false"
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/konflux-ci/release-service-catalog.git
          - name: revision
            value: production
          - name: pathInRepo
            value: tasks/verify-access-to-resources/verify-access-to-resources.yaml
    - name: collect-data
      params:
        - name: release
          value: $(params.release)
        - name: releasePlan
          value: $(params.releasePlan)
        - name: snapshot
          value: $(params.snapshot)
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/konflux-ci/release-service-catalog.git
          - name: revision
            value: production
          - name: pathInRepo
            value: tasks/collect-data/collect-data.yaml
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - verify-access-to-resources
    - name: reduce-snapshot
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/konflux-ci/release-service-catalog.git
          - name: revision
            value: production
          - name: pathInRepo
            value: tasks/reduce-snapshot/reduce-snapshot.yaml
      params:
        - name: SNAPSHOT
          value: $(workspaces.data.path)/$(tasks.collect-data.results.snapshotSpec)
        - name: SINGLE_COMPONENT
          value: $(tasks.collect-data.results.singleComponentMode)
        - name: SINGLE_COMPONENT_CUSTOM_RESOURCE
          value: snapshot/$(tasks.collect-data.results.snapshotName)
        - name: SINGLE_COMPONENT_CUSTOM_RESOURCE_NS
          value: $(tasks.collect-data.results.snapshotNamespace)
        - name: SNAPSHOT_PATH
          value: $(workspaces.data.path)/$(tasks.collect-data.results.snapshotSpec)
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - collect-data
    - name: apply-mapping
      params:
        - name: failOnEmptyResult
          value: "true"
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
      workspaces:
        - name: config
          workspace: release-workspace
      runAfter:
        - reduce-snapshot
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/konflux-ci/release-service-catalog.git
          - name: revision
            value: production
          - name: pathInRepo
            value: tasks/apply-mapping/apply-mapping.yaml
    - name: verify-enterprise-contract
      taskRef:
        resolver: "bundles"
        params:
          - name: bundle
            value: quay.io/enterprise-contract/ec-task-bundle:snapshot
          - name: kind
            value: task
          - name: name
            value: verify-enterprise-contract
      params:
        - name: IMAGES
          value: "$(workspaces.data.path)/$(tasks.collect-data.results.snapshotSpec)"
        - name: SSL_CERT_DIR
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: POLICY_CONFIGURATION
          value: $(params.enterpriseContractPolicy)
        - name: STRICT
          value: "1"
        - name: IGNORE_REKOR
          value: "true"
        - name: EXTRA_RULE_DATA
          value: $(params.enterpriseContractExtraRuleData)
        - name: TIMEOUT
          value: $(params.enterpriseContractTimeout)
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - apply-mapping
    - name: push-snapshot
      retries: 5
      when:
        - input: "$(tasks.apply-mapping.results.mapped)"
          operator: in
          values: ["true"]
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/konflux-ci/release-service-catalog.git
          - name: revision
            value: production
          - name: pathInRepo
            value: tasks/push-snapshot/push-snapshot.yaml
      params:
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: resultsDirPath
          value: "$(tasks.collect-data.results.resultsDir)"
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - verify-enterprise-contract
  finally:
    - name: cleanup
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/konflux-ci/release-service-catalog.git
          - name: revision
            value: production
          - name: pathInRepo
            value: tasks/cleanup-workspace/cleanup-workspace.yaml
      params:
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
        - name: delay
          value: "0"
      workspaces:
        - name: input
          workspace: release-workspace
